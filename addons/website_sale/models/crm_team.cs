C#
public partial class Website_CrmTeam {
    public void ComputeAbandonedCarts() {
        // abandoned carts to recover are draft sales orders that have no order lines,
        // a partner other than the public user, and created over an hour ago
        // and the recovery mail was not yet sent
        var websiteTeams = this.Env.Search<Website_CrmTeam>(x => x.WebsiteIds.Any());
        var abandonedCartsData = this.Env.Search<Sale_Order>(x => x.IsAbandonedCart && !x.CartRecoveryEmailSent && websiteTeams.Any(y => y.Id == x.TeamId)).GroupBy(x => x.TeamId).Select(x => new { TeamId = x.Key, AmountTotalSum = x.Sum(y => y.AmountTotal), Count = x.Count() }).ToList();
        var counts = abandonedCartsData.ToDictionary(x => x.TeamId, x => x.Count);
        var amounts = abandonedCartsData.ToDictionary(x => x.TeamId, x => x.AmountTotalSum);
        this.AbandonedCartsCount = counts.GetValueOrDefault(this.Id, 0);
        this.AbandonedCartsAmount = amounts.GetValueOrDefault(this.Id, 0);
    }

    public object GetAbandonedCarts() {
        return new {
            Name = this.Env.Translate("Abandoned Carts"),
            Type = "ir.actions.act_window",
            ViewMode = "tree,form",
            Domain = new[] { "is_abandoned_cart", "=", true },
            SearchViewId = this.Env.Ref("sale.sale_order_view_search_inherit_sale").Id,
            Context = new {
                SearchDefaultTeamId = this.Id,
                DefaultTeamId = this.Id,
                SearchDefaultRecoveryEmail = 1,
                Create = false
            },
            ResModel = "sale.order",
            Help = this.Env.Translate($"<p class=\"o_view_nocontent_smiling_face\">\n                        You can find all abandoned carts here, i.e. the carts generated by your website's visitors from over an hour ago that haven't been confirmed yet.</p>\n                        <p>You should send an email to the customers to encourage them!</p>\n                    ")
        };
    }
}
